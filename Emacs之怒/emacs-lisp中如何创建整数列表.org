#+TITLE: emacs-lisp中如何创建整数列表
#+AUTHOR: lujun9972
#+TAGS: Emacs之怒
#+DATE: [2022-02-17 四 20:23]
#+LANGUAGE:  zh-CN
#+STARTUP:  inlineimages
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

emacs-lisp中提供了一堆 =seq-*= 函数对序列进行操作，但却缺少类似 Python 中的 =range= 函数那样的生成序列的函数。

在网上搜索了一下才知道 emacs-lisp 中是可以使用 =number-sequence= 来实现类似的功能的。

#+begin_example
  number-sequence is a compiled Lisp function in ‘subr.el’.

  (number-sequence FROM &optional TO INC)

    Probably introduced at or before Emacs version 22.1.

  Return a sequence of numbers from FROM to TO (both inclusive) as a list.
  INC is the increment used between numbers in the sequence and defaults to 1.
  So, the Nth element of the list is (+ FROM (* N INC)) where N counts from
  zero.  TO is included only if there is an N for which TO = FROM + N * INC.
  If TO is nil or numerically equal to FROM, return (FROM).
  If INC is positive and TO is less than FROM, or INC is negative
  and TO is larger than FROM, return nil.
  If INC is zero and TO is neither nil nor numerically equal to
  FROM, signal an error.

  This function is primarily designed for integer arguments.
  Nevertheless, FROM, TO and INC can be integer or float.  However,
  floating point arithmetic is inexact.  For instance, depending on
  the machine, it may quite well happen that
  (number-sequence 0.4 0.6 0.2) returns the one element list (0.4),
  whereas (number-sequence 0.4 0.8 0.2) returns a list with three
  elements.  Thus, if some of the arguments are floats and one wants
  to make sure that TO is included, one may have to explicitly write
  TO as (+ FROM (* N INC)) or use a variable whose value was
  computed with this exact expression.  Alternatively, you can,
  of course, also replace TO with a slightly larger value
  (or a slightly more negative value if INC is negative).
#+end_example

而且 =number-sequence= 函数还支持小数，这个就比较牛逼了。
#+begin_src emacs-lisp
  (number-sequence 0.1 1 0.1)
#+end_src

#+RESULTS:
| 0.1 | 0.2 | 0.30000000000000004 | 0.4 | 0.5 | 0.6 | 0.7000000000000001 | 0.8 | 0.9 | 1.0 |

当然了，小数的表示不是那个准确的。

另外，我们还可以借助它实现其他生成序列的函数，比如
#+begin_src emacs-lisp
  (defun my/repeat (x c)
    (mapcar (lambda (_)
              c)
            (number-sequence 1 x)))

  (my/repeat 5 1)
#+end_src

#+RESULTS:
| 1 | 1 | 1 | 1 | 1 |
