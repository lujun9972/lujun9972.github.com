<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>暗无天日</title>
    <link>https://lujun9972.github.io</link>
    <description>=============&gt;DarkSun的个人博客</description>
    <pubDate>Tue, 15 Jun 2021 11:12:34 UTC</pubDate>
    <lastBuildDate>Tue, 15 Jun 2021 11:12:34 UTC</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>ego static site generator (https://github.com/emacs-china/ego)</generator>
<item>
<title>eva-after-load与mode-hook的区别</title>
<link>https://lujun9972.github.io/blog/2021/06/15/eva-after-load与mode-hook的区别/index.html</link>
<description>从 [[https://stackoverflow.com/questions/2736087/eval-after-load-vs-mode-hook#:~:text=Code%20wrapped%20in%20eval-after-load%20will%20be%20executed%20only,code%2C%20there%27s%20no%20notion%20of%20the%20%22current%20buffer%22.][eval-after-load vs. mode hook]] 中看到的，记录一下。

=eva-after-load= 与 =mode-hook= 都能用来对某个特点的 =mode= 进行设置，但是他们之间还是有一些区别的：

+ eval-after-load 只会执行一次，因此通常用来对全局变量的默认值进行一次性的设置，而不会对 buffer-local 之类的变量进行设置
+ eval-after-load 执行时， =current buffer= 为 =null=
+ mode-hook 在每次有 buffer 进入指定 mode 时执行，因此它通常用来对某个具体的 buffer 进行设置
+ mode-hook 执行的时间要晚于 =eval-after-load=
</description>
<pubDate>2021-06-15</pubDate>
<guid>https://lujun9972.github.io/blog/2021/06/15/eva-after-load与mode-hook的区别/index.html</guid>
</item>
<item>
<title>使用curl进行网站测速</title>
<link>https://lujun9972.github.io/blog/2021/06/08/使用curl进行网站测速/index.html</link>
<description>网站访问可以分为下面几个阶段：

+ DNS 域名解析
+ 通过SSL协议交换密钥（HTTPS)
+ 与服务端创建 TCP 访问连接
+ 客户端发起请求
+ 服务端收到请求并准备回应内容
+ 服务端回复回应内容

当我们优化网站速度时通常要现确定哪个阶段是耗时大头。而令我感到惊奇的是，原来 curl 的 =-w= 选项可以让 curl 完成访问网站的操作后将各阶段的耗时情况（以及其他一些访问信息）输出到标准输出。

=man curl= 中关于 =-w= 选项的说明如下：
#+begin_example
  -w, --write-out &lt;format&gt;
         Make curl display information on stdout after a completed trans‐
         fer. The format is a string that may contain  plain  text  mixed
         with  any  number of variables. The format can be specified as a
         literal &quot;string&quot;, or you can have curl read the  format  from  a
         file  with  &quot;@filename&quot; and to tell curl to read the format from
         stdin you write &quot;@-&quot;.

         The variables present in the output format will  be  substituted
         by  the  value or text that curl thinks fit, as described below.
         All variables are specified as %{variable_name} and to output  a
         normal  % you just write them as %%. You can output a newline by
         using \n, a carriage return with \r and a tab space with \t.

         NOTE: The %-symbol is a special symbol in the win32-environment,
         where  all  occurrences  of  %  must  be doubled when using this
         option.

         The variables available are:

         content_type   The Content-Type of the  requested  document,  if
                        there was any.

         filename_effective
                        The  ultimate  filename  that curl writes out to.
                        This is only meaningful if curl is told to  write
                        to  a  file  with  the  -O,  --remote-name or -o,
                        --output option. It&#39;s most useful in  combination
                        with  the -J, --remote-header-name option. (Added
                        in 7.26.0)

         ftp_entry_path The initial path curl ended up in when logging on
                        to the remote FTP server. (Added in 7.15.4)

         http_code      The numerical response code that was found in the
                        last retrieved HTTP(S)  or  FTP(s)  transfer.  In
                        7.18.2  the alias response_code was added to show
                        the same info.

         http_connect   The numerical code that was  found  in  the  last
                        response   (from  a  proxy)  to  a  curl  CONNECT
                        request. (Added in 7.12.4)

         http_version   The  http  version  that  was  effectively  used.
                        (Added in 7.50.0)

         local_ip       The  IP  address  of  the  local  end of the most
                        recently done connection - can be either IPv4  or
                        IPv6 (Added in 7.29.0)

         local_port     The  local  port number of the most recently done
                        connection (Added in 7.29.0)

         num_connects   Number of new connects made in the recent  trans‐
                        fer. (Added in 7.12.3)

         num_redirects  Number  of  redirects  that  were followed in the
                        request. (Added in 7.12.3)

         proxy_ssl_verify_result
                        The result of the HTTPS proxy&#39;s SSL peer certifi‐
                        cate verification that was requested. 0 means the
                        verification was successful. (Added in 7.52.0)

         redirect_url   When an HTTP request was made without -L, --loca‐
                        tion  to follow redirects (or when --max-redir is
                        met), this variable will show the  actual  URL  a
                        redirect would have gone to. (Added in 7.18.2)

         remote_ip      The  remote  IP address of the most recently done
                        connection - can be either IPv4 or IPv6 (Added in
                        7.29.0)

         remote_port    The  remote port number of the most recently done
                        connection (Added in 7.29.0)

         scheme         The URL scheme (sometimes called  protocol)  that
                        was effectively used (Added in 7.52.0)

         size_download  The total amount of bytes that were downloaded.

         size_header    The total amount of bytes of the downloaded head‐
                        ers.

         size_request   The total amount of bytes that were sent  in  the
                        HTTP request.

         size_upload    The total amount of bytes that were uploaded.

         speed_download The average download speed that curl measured for
                        the complete download. Bytes per second.

         speed_upload   The average upload speed that curl  measured  for
                        the complete upload. Bytes per second.

         ssl_verify_result
                        The  result of the SSL peer certificate verifica‐
                        tion that was requested. 0 means the verification
                        was successful. (Added in 7.19.0)

         time_appconnect
                        The  time,  in  seconds,  it  took from the start
                        until the SSL/SSH/etc  connect/handshake  to  the
                        remote host was completed. (Added in 7.19.0)

         time_connect   The  time,  in  seconds,  it  took from the start
                        until the TCP connect  to  the  remote  host  (or
                        proxy) was completed.

         time_namelookup
                        The  time,  in  seconds,  it  took from the start
                        until the name resolving was completed.

         time_pretransfer
                        The time, in seconds,  it  took  from  the  start
                        until  the file transfer was just about to begin.
                        This includes all pre-transfer commands and nego‐
                        tiations that are specific to the particular pro‐
                        tocol(s) involved.

         time_redirect  The time, in seconds, it took for all redirection
                        steps including name lookup, connect, pretransfer
                        and transfer before  the  final  transaction  was
                        started.  time_redirect shows the complete execu‐
                        tion time for multiple  redirections.  (Added  in
                        7.12.3)

         time_starttransfer
                        The  time,  in  seconds,  it  took from the start
                        until the first byte was just about to be  trans‐
                        ferred.  This  includes time_pretransfer and also
                        the time  the  server  needed  to  calculate  the
                        result.

         time_total     The  total time, in seconds, that the full opera‐
                        tion lasted.

         url_effective  The URL that was fetched last. This is most mean‐
                        ingful  if  you&#39;ve  told curl to follow location:
                        headers.

         If this option is used several times, the last one will be used.
#+end_example

其中与时间相关的变量包括：
+ time_namelookup :: DNS 解析时间，可以与 =--resolve= 选项配合寻找最快的DNS
+ time_connect :: 与服务端创建好 TCP 连接的时间，严格来说是客户端回复 ACK 的时间。我们可以通过 =time_connect - time_namelookup= 来大致推断网络延时。
+ time_appconnect :: 完成 SSL/TLS 设置的时间，此时客户端与服务端完成密钥交换，客户端准备发起请求
+ time_pretransfer :: 服务端收到请求的时间
+ time_starttransfer :: 服务端准备好回应内容的时间。
+ time_total :: 完成整个请求的所有时间
+ time_redirect :: 若请求经过多次重定向，那么这个包含直到最后一次请求开始所耗的时间。

下面这张从 [[https://blog.cloudflare.com/a-question-of-timing/][cloudflare]] 偷来的例子可以很直观的看出每个变量的对应关系

#+begin_src shell
curl -so /dev/null -w &quot;dnslookup: %{time_namelookup} | connect: %{time_connect} | appconnect: %{time_appconnect} | pretransfer: %{time_pretransfer} | starttransfer: %{time_starttransfer} | total: %{time_total} | size: %{size_download}\n&quot; https://www.zasag.mn
#+end_src

其中 =-s= 表示进入 =silent= 模式， =-o /dev/null= 表示不显示获取到的文件内容

结果为：
#+begin_example
  dnslookup: 1.510 | connect: 1.757 | appconnect: 2.256 | pretransfer: 2.259 | starttransfer: 2.506 | total: 3.001 | size: 53107
#+end_example

图示如下：
[[file:images/timingOfHTTPS.png]]
</description>
<pubDate>2021-06-08</pubDate>
<guid>https://lujun9972.github.io/blog/2021/06/08/使用curl进行网站测速/index.html</guid>
</item>
<item>
<title>Anki卡片共享CSS的方法</title>
<link>https://lujun9972.github.io/blog/2021/05/24/anki卡片共享css的方法/index.html</link>
<description>Anki 允许为不同的卡片类型设置不同的CSS样式，但有时我们会希望在多个卡片类型之间共享同一份样式以保证卡片展示的一致性。
由于 =collection.media= 目录中的文件所有卡片都能访问，因此可以将该目录作为中转中心实现卡片间共享CSS的目的。

1. 将 CSS 文件放在 =collection.media= 目录中

   Windows下该目录所在路径为 =%appdata%\Anki2\用户\collection.media\=

   Linux下该目录所在路径为 =~/.local/share/Anki2/用户/collection.media=

   MAC下该目录路径为 =~/Library/Application Support/Anki2/用户/collection.media=

2. 为了防止 CSS 文件在 =检查媒体= 时被作为无用媒体文件删除，CSS 文件需以下划线(=_=)开头。

   #+begin_src shell
     cat _anki_base.css
   #+end_src

   #+begin_src css
     .extra{
         margin-top:15px;
         font-size:16px;
         color: black;
         text-align:left;
     }
   #+end_src

3. 编辑卡片样式，在样式中通过 =@import url(&quot;_anki_base.css&quot;);= 引入共享的CSS文件。
[[file:images/share_css_in_anki.png]]   
</description>
<pubDate>2021-05-24</pubDate>
<guid>https://lujun9972.github.io/blog/2021/05/24/anki卡片共享css的方法/index.html</guid>
</item>
<item>
<title>bash中的&#39;&#39;与$&#39;&#39;</title>
<link>https://lujun9972.github.io/blog/2021/05/17/bash中的&#39;&#39;与$&#39;&#39;/index.html</link>
<description>之前我一直以为bash中的单引号字符串中是可以通过反斜线(\)来转义单引号的，但是通过查阅 =bash manual= 发现这是我的错觉。

bash中的单引号字符串(&#39;xxxx&#39;)会 *完全* 保留字符的字面意义，单引号是无法包含在其中,反斜杠在单引号字符串中表示的就是反斜杠，而不是转义符号。

如果想要引用单引号(&#39;)需要使用 =$&#39;xxxx&#39;= 这种格式，它会尽可能保留字符字面意义的情况下支持通过反斜杠(\)进行转义。
</description>
<pubDate>2021-05-17</pubDate>
<guid>https://lujun9972.github.io/blog/2021/05/17/bash中的&#39;&#39;与$&#39;&#39;/index.html</guid>
</item>
<item>
<title>笑话理解之Birds and bees</title>
<link>https://lujun9972.github.io/blog/2021/05/17/笑话理解之birds-and-bees/index.html</link>
<description>* birds and bees
#+begin_example
  A father asked his son, Little Johnny, if he knew about the birds and the bees.

  &quot;I don&#39;t want to know!&quot; Little Johnny said, exploding and bursting into tears. Confused, his father asked Little Johnny what was wrong.

  &quot;Oh Pop,&quot; Johnny sobbed, &quot;for me there was no Santa Claus at age six, no Easter Bunny at seven, and no Tooth Fairy at eight. And if you&#39;re telling me now that grown ups don&#39;t really have sex, I&#39;ve got nothing left to believe in!&quot;[2021-05-13 周四 06:30]
#+end_example

=birds and bees= 是 =性事= 的委婉说法
</description>
<pubDate>2021-05-17</pubDate>
<guid>https://lujun9972.github.io/blog/2021/05/17/笑话理解之birds-and-bees/index.html</guid>
</item>
<item>
<title>笑话理解之Pull out</title>
<link>https://lujun9972.github.io/blog/2021/05/17/笑话理解之pull-out/index.html</link>
<description>* why don&#39;t big planes have baby planes?&quot;
#+begin_example
  A mother and her son were flying Southwest Airlines from Kansas City to Chicago. The son (who had been looking out the window) turned to his mother and asked, &quot;If big dogs have baby dogs and big cats have baby cats, why don&#39;t big planes have baby planes?&quot;

  The mother (who couldn&#39;t think of an answer) told her son to ask the stewardess. So the boy asked the stewardess, &quot;If big dogs have baby dogs and big cats have baby cats, why don&#39;t big planes have baby planes?&quot;

  The stewardess responded, &quot;Did your mother tell you to ask me?&quot; The boy admitted that this was the case. &quot;Well, then, tell your mother that there are no baby planes because Southwest always pulls out on time. Your mother can explain that to you.&quot;
#+end_example

=pull out= 有 =起飞= 的意思，也有 =拔出= 的意思。
</description>
<pubDate>2021-05-17</pubDate>
<guid>https://lujun9972.github.io/blog/2021/05/17/笑话理解之pull-out/index.html</guid>
</item>
<item>
<title>笑话理解之Change</title>
<link>https://lujun9972.github.io/blog/2021/05/07/笑话理解之change/index.html</link>
<description>* no change
#+begin_example
  A man was rushed in to hospital yesterday because he swallowed a five pound note.

  They are keeping him in for observation on his condition - but so far there has been no change!
#+end_example

=change= 有 =改变= 的意思，也有 =零钱= 的意思。
</description>
<pubDate>2021-05-07</pubDate>
<guid>https://lujun9972.github.io/blog/2021/05/07/笑话理解之change/index.html</guid>
</item>
<item>
<title>为ping命令增加时间信息的正确方法</title>
<link>https://lujun9972.github.io/blog/2021/04/26/为ping命令增加时间信息的正确方法/index.html</link>
<description>不知道为什么，在网上搜索为 ping 命令增加时间信息方法时，给出来得解决方案都是将 ping 命令的结果传递给一个循环，然后在循环内生成时间。

这个循环可能是一个流式处理命令，比如 awk:
#+begin_src shell :results org
  ping www.baidu.com -c 5 | awk &#39;{ print strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,systime())&quot;\t&quot;$0 }&#39;
#+end_src

#+RESULTS:
#+begin_src org
2021-04-26 11:26:24	PING www.a.shifen.com (14.215.177.38) 56(84) bytes of data.
2021-04-26 11:26:24	64 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=1 ttl=52 time=12.1 ms
2021-04-26 11:26:24	64 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=2 ttl=52 time=9.51 ms
2021-04-26 11:26:25	64 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=3 ttl=52 time=18.4 ms
2021-04-26 11:26:26	64 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=4 ttl=52 time=15.4 ms
2021-04-26 11:26:27	64 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=5 ttl=52 time=9.81 ms
2021-04-26 11:26:27	
2021-04-26 11:26:27	--- www.a.shifen.com ping statistics ---
2021-04-26 11:26:27	5 packets transmitted, 5 received, 0% packet loss, time 10077ms
2021-04-26 11:26:27	rtt min/avg/max/mdev = 9.519/13.089/18.481/3.432 ms
#+end_src

也可能是一个 while 循环语句：
#+begin_src shell :results org
  ping www.baidu.com -c 5 |while read result
  do
      echo &quot;$(date) ${result}&quot;
  done
#+end_src

#+RESULTS:
#+begin_src org
2021年 04月 26日 星期一 11:25:09 CST PING www.a.shifen.com (14.215.177.38) 56(84) bytes of data.
2021年 04月 26日 星期一 11:25:09 CST 64 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=1 ttl=52 time=8.73 ms
2021年 04月 26日 星期一 11:25:09 CST 64 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=2 ttl=52 time=16.4 ms
2021年 04月 26日 星期一 11:25:10 CST 64 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=3 ttl=52 time=9.98 ms
2021年 04月 26日 星期一 11:25:11 CST 64 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=4 ttl=52 time=10.8 ms
2021年 04月 26日 星期一 11:25:12 CST 64 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=5 ttl=52 time=17.3 ms
2021年 04月 26日 星期一 11:25:12 CST 
2021年 04月 26日 星期一 11:25:12 CST --- www.a.shifen.com ping statistics ---
2021年 04月 26日 星期一 11:25:12 CST 5 packets transmitted, 5 received, 0% packet loss, time 7043ms
2021年 04月 26日 星期一 11:25:12 CST rtt min/avg/max/mdev = 8.731/12.684/17.392/3.548 ms
#+end_src

但是这有个问题，那就是时间戳不是由 =ping= 命令生成的，而是在循环体内生成的。这就导致若我们在时间戳生成之前用 =sed= 和 =awk= 之类的命令对 =ping= 结果加工后，由于它们的缓存机制会使得输出到循环的时间比实际 ping 命令产生结果的时间产生较大差别。

例如下面命令的输出中，生成的时间是同一秒，这明显是不对的。
#+begin_src shell :results org
  ping www.baidu.com -c 5|awk &#39;1&#39; | awk &#39;{ print strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,systime())&quot;\t&quot;$0 }&#39;
#+end_src

#+RESULTS:
#+begin_src org
2021-04-26 11:27:01	PING www.a.shifen.com (14.215.177.39) 56(84) bytes of data.
2021-04-26 11:27:01	64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=1 ttl=52 time=13.2 ms
2021-04-26 11:27:01	64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=2 ttl=52 time=8.32 ms
2021-04-26 11:27:01	64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=3 ttl=52 time=18.1 ms
2021-04-26 11:27:01	64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=4 ttl=52 time=8.61 ms
2021-04-26 11:27:01	64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=5 ttl=52 time=9.09 ms
2021-04-26 11:27:01	
2021-04-26 11:27:01	--- www.a.shifen.com ping statistics ---
2021-04-26 11:27:01	5 packets transmitted, 5 received, 0% packet loss, time 4052ms
2021-04-26 11:27:01	rtt min/avg/max/mdev = 8.322/11.492/18.191/3.794 ms
#+end_src


事实上，通过查看 =ping= 命令的 manual, 我们可以发现 ping 命令的 =-D= 选项本身就会为每一行输出生成时间戳：
#+begin_example
   -D     Print timestamp (unix time + microseconds as in gettimeofday) before each line.
#+end_example

#+begin_src shell :results org
  ping -c 5 www.baidu.com -D
#+end_src

#+RESULTS:
#+begin_src org
PING www.a.shifen.com (14.215.177.39) 56(84) bytes of data.
[1619407749.478198] 64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=1 ttl=52 time=8.86 ms
[1619407749.492436] 64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=2 ttl=52 time=13.8 ms
[1619407750.493666] 64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=3 ttl=52 time=13.4 ms
[1619407751.492797] 64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=4 ttl=52 time=10.5 ms
[1619407752.501662] 64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=5 ttl=52 time=17.1 ms

--- www.a.shifen.com ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4042ms
rtt min/avg/max/mdev = 8.861/12.776/17.120/2.861 ms
#+end_src

唯一的问题就是这个时间戳采取的是是从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数，不方便理解，但是没关系，我们可以用 =date= 进行一下转换：
#+begin_src shell :results org
  ping -c 5 www.baidu.com -D |awk &#39;1&#39; |while read result
  do
      if [[ &quot;${result}&quot; =~ &quot;[&quot; ]] # 以 [ 开头的行带时间戳
      then
         read timestamp rest &lt; &lt;(echo ${result}|tr -d &#39;[]&#39;)
         echo $(date -d @${timestamp}) &quot;${rest}&quot;
         else
             echo &quot;${result}&quot;
      fi
  done
#+end_src

#+RESULTS:
#+begin_src org
PING www.a.shifen.com (14.215.177.39) 56(84) bytes of data.
2021年 04月 26日 星期一 11:41:25 CST 64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=1 ttl=52 time=8.97 ms
2021年 04月 26日 星期一 11:41:25 CST 64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=2 ttl=52 time=7.89 ms
2021年 04月 26日 星期一 11:41:26 CST 64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=3 ttl=52 time=27.3 ms
2021年 04月 26日 星期一 11:41:27 CST 64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=4 ttl=52 time=20.6 ms
2021年 04月 26日 星期一 11:41:28 CST 64 bytes from 14.215.177.39 (14.215.177.39): icmp_seq=5 ttl=52 time=22.2 ms

--- www.a.shifen.com ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4069ms
rtt min/avg/max/mdev = 7.897/17.425/27.343/7.671 ms
#+end_src
</description>
<pubDate>2021-04-26</pubDate>
<guid>https://lujun9972.github.io/blog/2021/04/26/为ping命令增加时间信息的正确方法/index.html</guid>
</item>
<item>
<title>笑话理解之Cunt</title>
<link>https://lujun9972.github.io/blog/2021/04/26/笑话理解之cunt/index.html</link>
<description>
* sad life of a penis
#+begin_example
  The sad life a penis: &quot;I only have one eye, my hair is a mess, my skin is wrinkly, and my relatives are nuts, my neighbor is an asshole and my best friend’s a cunt!&quot;
#+end_example

=nuts= 既有 =怪人= 的意思，也有 =睾丸= 的意思,
=asshole= 既有 =肛门= 的意思，也有 =混蛋= 的意思，
=cunt= 既有 =阴道= 的意思，也有 =笨蛋= 的意思。
</description>
<pubDate>2021-04-26</pubDate>
<guid>https://lujun9972.github.io/blog/2021/04/26/笑话理解之cunt/index.html</guid>
</item>
<item>
<title>笑话理解之Devil</title>
<link>https://lujun9972.github.io/blog/2021/04/26/笑话理解之devil/index.html</link>
<description>* scared devil out of people
#+begin_example
  Some ecclesiastical gentlemen -- a cardinal, a couple of bishops and some others -- were waiting outside the Pearly Gates for St. Peter to open up.

  He finally arrived, but just they were about to enter heaven St. Peter asked them to wait a moment and let a new arrival through first.

  A sweet young thing in a mini-skirt arrived and was ushered through.

  The cardinal was a bit upset about this and demanded an explanation from St. Peter. After all, they had been waiting outside for quite some time and were pillars of the church. How could a girl in a mini-skirt deserve better treatment?

  St. Peter smiled and told him, &quot;While she was alive, that young lady drove a little yellow sports car. She regularly jumped red lights, overtook on blind corners, and generally scared the devil out of more people than all of you combined.&quot;
#+end_example

=scared devil out of people= 是把人吓得魂飞破散的意思，但字面意思可以理解为 =把魔鬼从人身体里吓出来=
</description>
<pubDate>2021-04-26</pubDate>
<guid>https://lujun9972.github.io/blog/2021/04/26/笑话理解之devil/index.html</guid>
</item>
</channel>
</rss>