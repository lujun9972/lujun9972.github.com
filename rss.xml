<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>暗无天日</title>
    <link>https://lujun9972.github.io</link>
    <description>=============&gt;DarkSun的个人博客</description>
    <pubDate>Thu, 27 Aug 2020 08:36:16 UTC</pubDate>
    <lastBuildDate>Thu, 27 Aug 2020 08:36:16 UTC</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>ego static site generator (https://github.com/emacs-china/ego)</generator>
<item>
<title>笑话理解之affair</title>
<link>https://lujun9972.github.io/blog/2020/08/27/笑话理解之affair/index.html</link>
<description>* Fishing Jokes
#+begin_example
  &quot;Do you really believe your husband when he tells you he goes fishing every weekend?&quot; asked Jane&#39;s best friend.

  &quot;Why shouldn&#39;t I?&quot; said Jane.

  &quot;Well, maybe he is having an affair?&quot;

  &quot;No way&quot; said Jane &quot;he never returns with any fish...&quot;
#+end_example

=affair= 即有 =物品= 的意思，也有 =婚外情= 的意思
</description>
<pubDate>2020-08-27</pubDate>
<guid>https://lujun9972.github.io/blog/2020/08/27/笑话理解之affair/index.html</guid>
</item>
<item>
<title>笑话理解之bricklayer</title>
<link>https://lujun9972.github.io/blog/2020/08/27/笑话理解之bricklayer/index.html</link>
<description>* What do you get if you cross a chicken with a cement mixer?
#+begin_example
  What do you get if you cross a chicken with a cement mixer?

  A brick layer!
#+end_example

=layer= 有 =下蛋母鸡= 的意思， =bricklayer= 则是 =砌砖工= 的意思。
</description>
<pubDate>2020-08-27</pubDate>
<guid>https://lujun9972.github.io/blog/2020/08/27/笑话理解之bricklayer/index.html</guid>
</item>
<item>
<title>笑话理解之court</title>
<link>https://lujun9972.github.io/blog/2020/08/27/笑话理解之court/index.html</link>
<description>* The first tennis match in Bible
#+begin_example
Where is the first tennis matching mentioned in the Bible?

When Joseph served in Pharaoh&#39;s court
#+end_example

=court= 即有 =宫廷= 的意思，也有 =篮球，网球等的球场= 的意思。
</description>
<pubDate>2020-08-27</pubDate>
<guid>https://lujun9972.github.io/blog/2020/08/27/笑话理解之court/index.html</guid>
</item>
<item>
<title>笑话理解之on the house</title>
<link>https://lujun9972.github.io/blog/2020/08/27/笑话理解之on-the-house/index.html</link>
<description>#+begin_example
  How do you get a blonde on the roof?

  Tell her drinks are on the house.
#+end_example

=on the house= 不是在房子上的意思，而是 =免费= 的意思。
</description>
<pubDate>2020-08-27</pubDate>
<guid>https://lujun9972.github.io/blog/2020/08/27/笑话理解之on-the-house/index.html</guid>
</item>
<item>
<title>在命令行进行简单的统计分析</title>
<link>https://lujun9972.github.io/blog/2020/08/23/在命令行进行简单的统计分析/index.html</link>
<description>* 使用awk获取最小值、最大值、中位数和平均值

使用awk先把数据存入一个数组中，然后对数组进行排序后就可以自己写代码找出最小值、最大值、中位数和平均值了：

#+begin_src awk :tangle ~/bin/calculate.awk
  #! /usr/bin/awk -f
  {
      sum += $1                   # 假设数据放在第一列
      nums[NR] = $1  # 将数据记录到数组中
  }
  END {
      if (NR == 0) exit  #防止出现处于0的情况To avoid division by zero

      asort(nums)  #  先对数据进行排序，用于记录中位数

      # 计算中位数
      median = (NR % 2 == 0) ? ( nums[NR / 2] + nums[NR / 2 + 1] ) / 2  : nums[int(NR / 2) + 1]

      # 计算平均
      mean = sum/NR

      printf &quot;min = %s, max = %s, median = %s, mean = %s\n&quot;, nums[1], nums[NR], median, mean
  }
#+end_src

我们可以实验一下：
#+begin_src shell :results org
  seq -10 3 30|~/bin/calculate.awk
#+end_src

#+RESULTS:
#+begin_src org
min = -10, max = 29, median = 9.5, mean = 9.5
#+end_src

* 使用datamash进行统计分析
使用awk虽然可以进行统计分析，但是需要自己去实现大量的细节，很麻烦。 =datamash= 则是一个直接提供了基本统计能力的命令行程序。

datamash的使用非常简单，其调用规则为 =datamash 选项 统计操作1 数据列1 [统计操作2 数据列2]...=. 
它会对 =数据列N= 所表示的数据执行 =统计操作N=. 其中 =数据列= 一般是一个表示第几列的数字，但是当数据文件中的第一行是标题时，可以通过 =-H= 选项来指明数据文件中包含标题行，此时 =数据列= 可以是标题名来代替。

** 常见的选项说明

+ 分组 :: datamash支持对数据进行分组统计，通过使用 ~--group=数据列1[,数据列2,数据列3]~ 可以指明根据哪几个域进行分组
+ 排序 :: datamash需要输入的数据是预先经过排序的，若数据未经过排序则需要通过 ~--sort~ 选项预先进行排序
+ 忽略大小写差异 :: 通过 ~--ignore-case~ 选项可以让 datamash 在分组时忽略大小写的差异
+ 设置分隔符 :: 默认情况下datamash使用 ~TAB~ 作为列的分隔符，通过 ~--field-separator=x~ 可以设置 ~x~ 作为列分隔符，也可以通过 ~--whitespace~ 设置使用一个或多个空格或者tab作为分隔符。
+ 转置 :: 通过 ~transpose~ 选项可以交换行列式
+ 反转 :: 通过 ~reverse~ 选项可以反转字段的顺序
+ 跳过空值 :: ~--narm~ 跳过空域

** 常见的统计操作
+ count :: 计算总数据量
+ rand :: 随机返回一个值
+ sum :: 汇总
+ min :: 取最小值
+ max :: 取最大值
+ absmin :: 取绝对值最小的那个值
+ absmax :: 取绝对值最大的那个值
+ range :: 值域范围，即max - min
+ mean :: 取均值
+ median :: 取中位数
+ q1 :: 取第一四分位
+ q3 :: 取第三四分位
+ iqr :: 取四分位距
+ mode :: 取众数
+ antimode :: 取最少出现的数
+ pstdev :: 总体标准差
+ sstdev :: 样本标准差
+ pvar :: 总体方差
+ svar :: 样本方差
+ pskew :: 总体偏度
+ sskew :: 样本偏度
+ pkurt :: 总体峰度
+ skurt :: 样本峰度
+ pcov :: 总体协方差，需要两组数据，用 =列1:列2= 来表示
+ scov :: 样本协方差，需要两组数据，用 =列1:列2= 来表示
+ ppearson :: 总体皮尔逊相关系数，需要两组数据，用 =列1:列2= 来表示
+ spearson :: 样本皮尔逊相关系数，需要两组数据，用 =列1:列2= 来表示

** 例子
比如上面的awk脚本可以用一行datamash命令代替：
#+begin_src shell :results org
  seq -10 3 30|datamash min 1 max 1 median 1 mean 1
#+end_src

#+RESULTS:
#+begin_src org
-10	29	9.5	9.5
#+end_src
</description>
<pubDate>2020-08-23</pubDate>
<guid>https://lujun9972.github.io/blog/2020/08/23/在命令行进行简单的统计分析/index.html</guid>
</item>
<item>
<title>笑话理解之Jet</title>
<link>https://lujun9972.github.io/blog/2020/08/18/笑话理解之jet/index.html</link>
<description>* private jet
[[file:images/joke_jet.jpg]]

=jet= 即有 =喷气式飞机= 的意思，也有 =喷嘴= 的意思。
</description>
<pubDate>2020-08-18</pubDate>
<guid>https://lujun9972.github.io/blog/2020/08/18/笑话理解之jet/index.html</guid>
</item>
<item>
<title>如何禁止eww生成cookie</title>
<link>https://lujun9972.github.io/blog/2020/08/15/如何禁止eww生成cookie/index.html</link>
<description>通过阅读 =eww= 的源代码可以看到 =eww= 是通过 =url= 库来获取HTML页面的，其关键代码如下：
#+begin_src emacs-lisp
  (let ((url-mime-accept-string eww-accept-content-types))
    (url-retrieve url &#39;eww-render
                  (list url nil (current-buffer))))
#+end_src

而 =url= 是通过 =url-cookie= 库来管理cookie的，这个库提供了两个变量来让我们设置哪些URL可以设置Cookie，哪些URL不允许设置Cookie：
+ url-cookie-trusted-urls :: A list of regular expressions matching URLs to always accept cookies from.
+ url-cookie-untrusted-urls :: A list of regular expressions matching URLs to never accept cookies from.

所以可以通过如下设置来完全禁止 eww 生成 cookie.
#+begin_src emacs-lisp
  (setq url-cookie-trusted-urls &#39;()       ;不设置白名单
        url-cookie-untrusted-urls &#39;(&quot;.*&quot;)) ;所有内容都匹配黑名单
#+end_src
</description>
<pubDate>2020-08-15</pubDate>
<guid>https://lujun9972.github.io/blog/2020/08/15/如何禁止eww生成cookie/index.html</guid>
</item>
<item>
<title>为Linux系统开启多因素认证</title>
<link>https://lujun9972.github.io/blog/2020/08/15/为linux系统开启多因素认证/index.html</link>
<description>通常我们登陆系统时只需要输入用户名和密码即可（若是通过SSH登陆则还可以通过密钥对来登陆）。
而多因素认证可以要求用户提供附加的认证信息来加强安全性，这个附加信息可能是一条短信验证码，安全令牌应用生成的一次性密码，指纹等内容。

本文要做的就是通过 google-authenticator 为Linux增加基于安全令牌的多因素认证

* 安装
首先在Linux上安装PAM模块google-authenticator
#+begin_src shell
  sudo pacman -S libpam-google-authenticator
#+end_src

然后，在手机上安装 =小米安全令牌= 应用

* 配置 google-authenticator 模块
运行 =google-authenticator= 来生成 OTP code。该命令会询问是否基于时间生成认证码，并生成一个二维码供你扫描。

[[file:images/OTP.png]]

在手机上打开 =小米安全令牌= 扫描这个二维码就能看认证码了，输入认证码后，再回答几个问题就完成了google-authentiator模块的配置了
#+begin_example
  Enter code from app (-1 to skip): 383791
  Code confirmed
  Your emergency scratch codes are:
    28577389
    12044244
    52789565
    81786311
    51903013

  Do you want me to update your &quot;/home/lujun9972/.google_authenticator&quot; file? (y/n) y

  Do you want to disallow multiple uses of the same authentication
  token? This restricts you to one login about every 30s, but it increases
  your chances to notice or even prevent man-in-the-middle attacks (y/n) y

  By default, a new token is generated every 30 seconds by the mobile app.
  In order to compensate for possible time-skew between the client and the server,
  we allow an extra token before and after the current time. This allows for a
  time skew of up to 30 seconds between authentication server and client. If you
  experience problems with poor time synchronization, you can increase the window
  from its default size of 3 permitted codes (one previous code, the current
  code, the next code) to 17 permitted codes (the 8 previous codes, the current
  code, and the 8 next codes). This will permit for a time skew of up to 4 minutes
  between client and server.
  Do you want to do so? (y/n) y

  If the computer that you are logging into isn&#39;t hardened against brute-force
  login attempts, you can enable rate-limiting for the authentication module.
  By default, this limits attackers to no more than 3 login attempts every 30s.
  Do you want to enable rate-limiting? (y/n) y
#+end_example

* 启用google-authenticator模块
一般来说，通过 =login= 登陆系统要求接触到物理机器，本身安全性已经足够高了，开启多因素认证意义不大，我们主要对通过网络认证的 =sshd= 进行约束。

1. 为 =sshd= PAM启用google-authenticator认证

   往 =/etc/pam.d/sshd= 中添加如下内容:
   #+begin_src conf
     auth required pam_google_authenticator.so nullok
   #+end_src
   
   其中 =nullok= 的意思是对于未配置多因素认证的用户不需要输入认证码。若没有这个参数则会强制要求主机上的所有用户都必须启用多因素认证。

2. 配置 =sshd= 使用PAM进行认证

   编辑 =/etc/ssh/sshd_config= 确定 =UsePAM= 的值为 =yes=

3. 配置 =sshd= 提示输入认证码

   编辑 =/etc/ssh/sshd_config= 确定 =ChallengeResponseAuthentication= 的值为 =yes=

4. 重启 =sshd= 服务
   
   #+begin_src shell
     sudo systemctl restart sshd
   #+end_src


这样一来，通过 =sshd= 登陆 =lujun9972= 这个用户时就会要求输入认证码了，而登陆其他用户时则无需输入验证码:
#+begin_example
  lujun9972@orangepipc2:~$ ssh 192.168.1.206 -p 8022
  The authenticity of host &#39;[192.168.1.206]:8022 ([192.168.1.206]:8022)&#39; can&#39;t be established.
  ECDSA key fingerprint is SHA256:zIiiOyKuX/q7d+CI5HKNTTiqcHQ+QSf+caivgdS/OG8.
  Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
  Warning: Permanently added &#39;[192.168.1.206]:8022&#39; (ECDSA) to the list of known hosts.
  Password: 
  Verification code: 
  Last login: Sat Aug 15 19:35:37 2020 from 127.0.0.1
  Test whether fcitx is running correctly with dbus...
  Fcitx is running correctly.

  =========================================================
  Launch fbterm...
  stdin isn&#39;t a interactive tty!
  lujun9972:~/ $ exit
  logout
  Connection to 192.168.1.206 closed.
  lujun9972@orangepipc2:~$ ssh daddy@192.168.1.206 -p 8022
  Password: 
  Last login: Sat Aug 15 19:37:50 2020 from 127.0.0.1
  [daddy@T520 /]$ exit
  logout
  Connection to 192.168.1.206 closed.
  lujun9972@orangepipc2:~$ 
#+end_example
</description>
<pubDate>2020-08-15</pubDate>
<guid>https://lujun9972.github.io/blog/2020/08/15/为linux系统开启多因素认证/index.html</guid>
</item>
<item>
<title>使用systemd-detect-virt判断Linux是否运行在虚拟机中</title>
<link>https://lujun9972.github.io/blog/2020/08/08/使用systemd-detect-virt判断linux是否运行在虚拟机中/index.html</link>
<description>之前我一直是用 =dmidecode= 来判断Linux是否运行在虚拟环境：

在物理机上：
#+begin_src shell :dir /sudo:: :results org
  sudo dmidecode -s system-product-name
#+end_src

#+RESULTS:
#+begin_src org
2353ABU
#+end_src

在虚拟机上：
#+begin_src shell :dir /ssh:192.168.1.85|sudo:192.168.1.85: :results org
  sudo dmidecode -s system-product-name
#+end_src

#+RESULTS:
#+begin_src org
VirtualBox
#+end_src

但是它有个缺陷，就是不支持容器的检查。在容器中运行 =dmidecode= 会提示错误信息 =/dev/mem: No such file or directory=
若你把 =/dev= 挂载进容器，则又会被识别为物理急。

不过今天我发现，原来 =systemd= 已经提供了一个命令来帮你完成这项任务了，那就是 =systemd-detect-virt=.

在物理机上：
#+begin_src shell :dir /sudo:: :results org
  systemd-detect-virt;exit 0
#+end_src

#+RESULTS:
#+begin_src org
none
#+end_src

在虚拟机上：
#+begin_src shell :dir /ssh:192.168.1.85|sudo:192.168.1.85: :results org
  systemd-detect-virt;exit 0
#+end_src

#+RESULTS:
#+begin_src org
oracle
#+end_src

在容器上:
#+begin_src shell :dir /docker:a4622369efdd: :results org
  systemd-detect-virt;exit 0
#+end_src

#+RESULTS:
#+begin_src org
docker
#+end_src
</description>
<pubDate>2020-08-08</pubDate>
<guid>https://lujun9972.github.io/blog/2020/08/08/使用systemd-detect-virt判断linux是否运行在虚拟机中/index.html</guid>
</item>
<item>
<title>为什么排序数组比未排序数组的处理速度要快?</title>
<link>https://lujun9972.github.io/blog/2020/07/22/为什么排序数组比未排序数组的处理速度要快-/index.html</link>
<description>今天在 Stack Overflow 上看到一个有趣的问题： Why is processing a sorted array faster than processing an unsorted array?

提问者列了一段代码：
#+begin_src C++ :results org
  #include &lt;algorithm&gt;
  #include &lt;ctime&gt;
  #include &lt;iostream&gt;

  int main()
  {
    // 生成数据
    const unsigned arraySize = 32768;
    int data[arraySize];

    for (unsigned c = 0; c &lt; arraySize; ++c)
      data[c] = std::rand() % 256;

    // !!! 这一行会导致后面的循环运行速度变快.
    // std::sort(data, data + arraySize);

    // 测试运算速度
    clock_t start = clock();
    long long sum = 0;

    for (unsigned i = 0; i &lt; 100000; ++i)
      {
        // 主循环
        for (unsigned c = 0; c &lt; arraySize; ++c)
          {
            if (data[c] &gt;= 128)
              sum += data[c];
          }
      }

    double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;

    std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;
    std::cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; std::endl;
  }
#+end_src

这段代码奇就奇怪在当注释掉 =std::sort(data, data + arraySize);= 这行代码后，循环运算的速度有了明显的提升。

比如在我Win10 的 WSL 上加上排序代码后的运算时间为 =6.65907= 秒，去掉排序代码后的运算时间为 =20.5398=.

那么产生这一现象的原因是什么呢？那就是分支预测。

分支预测(Branch Prediction)是一种用来解决分支指令导致流水线失败的方法。
即CPU的分支预测器预测条件表达式中哪一路最可能发生，然后根据预测结果进行取指令和执行指令等操作。
这样一来，在预测成功的情况下，CPU就避免了由于流水线停顿而导致的时间浪费。而在分支预测错误的情况下，则需要将流水线中推测执行的所有中间结果全部放弃，重新从另一个分支出发取指令和执行指令。
由于现代的CPU使用的流水线普遍很长，一般分支预测失败会损失大约10-20个时钟周期。

那么回到上面的这段代码。代码中有且仅有一个分支语句就是 ~if (data[c] &gt;= 128)~,而这个语句就是导致两个数组运算速度差距如此之大的罪魁祸首。

现代的CPU普遍采用动态预测器，即根据历史的分支执行信息来进行预测。
比如最简单的1 bit 动态预测就是直接根据该指令上次是否跳转来预测此次是否跳转。如果上次跳转，则预测此次也会跳转。
当然实际使用的动态预测模型不会这么简单啦。

当预先对数组进行排序后，预测变得十分简单，因此在执行过程中CPU可以充分利用流水线的能力进行加速。
而在完全随机的情况下，预测变得不可能，CPU猜错的概率为 50%,也就是有一半的概率需要清空流水线，损失那10-20个时钟周期。

由于条件语句能够极大的干扰 CPU 流水线的运行，因此一个常用的提速方法就是去掉条件语句，比如在最高赞的那个答案中，给出的解决方案就是把
#+begin_src C
  if (data[c] &gt;= 128)
    sum += data[c];
#+end_src

改写成
#+begin_src C
  int t = (data[c] - 128) &gt;&gt; 31;
  sum += ~t &amp; data[c];
#+end_src

不过这个可读性不是一般的差～～～

随便一提，在这个问题后面还有一个高赞答案是使用 =?:= (据说会编译成条件传送指令cmov)进行改写:
#+begin_src C
  sum += data[c] &gt;=128 ? data[c] : 0;
#+end_src

但是我测试的结果发现这样修改后的速度并没有变快,不知道是什么原因。
</description>
<pubDate>2020-07-22</pubDate>
<guid>https://lujun9972.github.io/blog/2020/07/22/为什么排序数组比未排序数组的处理速度要快-/index.html</guid>
</item>
</channel>
</rss>