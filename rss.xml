<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>暗无天日</title>
    <link>https://lujun9972.github.io</link>
    <description>=============&gt;DarkSun的个人博客</description>
    <pubDate>Tue, 08 Dec 2020 12:53:46 UTC</pubDate>
    <lastBuildDate>Tue, 08 Dec 2020 12:53:46 UTC</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>ego static site generator (https://github.com/emacs-china/ego)</generator>
<item>
<title>ssh偶发性登录卡死之谜</title>
<link>https://lujun9972.github.io/blog/2020/12/08/ssh偶发性登录卡死之谜/index.html</link>
<description>* 现象
今天遇到一个非常诡异的 ssh 登陆失败的情况，：

1. 通过 ssh 登陆某主机（假设为user@Server）经常卡死，但经过多次尝试偶尔会出现登陆成功的情况。
2. 尝试用 ssh 登陆该主机的其他用户（tmpusr@Server），经常能成功，但是多次尝试会出现偶尔登陆卡死的情况。
3. 使用 ssh -vvv user@Server 尝试调试，发现能够正常登陆，而且每次都能登陆成功。

* 排查过程
1. 使用 =strace -yo /tmp/ssh.log ssh user@server= 追踪系统调用情况，发现卡在了 =read socket= 上了，也就是在等待 =Server= 回复内容一直没等待。

2. 使用 =netstat= 观察 Client 端的网络链接情况
   #+begin_src shell
     netstat -tuanpe |grep ssh
   #+end_src
   结果为
   #+begin_example
     (Not all processes could be identified, non-owned process info
      will not be shown, you would have to be root to see it all.)
     tcp        0      1 10.7.2.3:60078          10.8.24.17:22           SYN_SENT    5000       152156234  4772/ssh
   #+end_example

   连接状态 SYN_SENT 为 TCP 建立链接三次握手的第一步，表示已经发了SYN信号给Server，但并未收到Server回复的SYN ACK

3. 使用 =netstat= 观察 Server 端的网络链接情况
   #+begin_src shell
     netstat -an |grep &#39;ServerIP.22&#39;|grep &#39;ClientIP&#39;
   #+end_src
   结果为
   #+begin_example
     tcp4       0      0  ServerIP.22          ClientIP.60078         SYN_RCVD
   #+end_example

   连接状态 SYN_RCVD 为 TCP 建立链接三次握手的第二步，表示 Server 确实已经收到了 Client 发来的SYN信号，且回复了SYN ACK

4. 通过步骤2和3,我们可以推测出 ssh 登陆卡死的原因是 Server 回复的 SYN ACK 没有发送到 Client 端，导致 TCP 链接无法创建起来。

5. 使用 ping 大包的方式检测网络质量
   #+begin_src shell
     ping -s 65508 ClientIP
   #+end_src
   结果为
   #+begin_example
     65515 bytes from ClientIP: icmp_seq=0 ttl=63 time=0 ms
     65515 bytes from ClientIP: icmp_seq=1 ttl=63 time=0 ms
     65515 bytes from ClientIP: icmp_seq=2 ttl=63 time=0 ms
     65515 bytes from ClientIP: icmp_seq=3 ttl=63 time=0 ms
     65515 bytes from ClientIP: icmp_seq=4 ttl=63 time=0 ms
     65515 bytes from ClientIP: icmp_seq=5 ttl=63 time=0 ms
   #+end_example
   可以判断网络质量并不差

6. 检查Server端的路由配置
   #+begin_src shell
     netstat -r
   #+end_src
   结果为
   #+begin_example
     Routing tables
     Destination        Gateway           Flags   Refs     Use  If   Exp  Groups

     Route Tree for Protocol Family 2 (Internet):
     default            XX.XX.XX.XX         UG        3   2048482 en0      -      -
     ClientNet            YY.YY.YY.YY      UG        2    181966 en2      -      -   =&gt;
     ClientNet            YY.YY.YY.YY      UG        1    178100 en0      -      -
   #+end_example

   很惊奇的发现发送到 Client所在网络的路由配了两个，分别使用 =en2= 和 =en0= 两个网卡

7. 检查这两个网卡的IP配置发现只有 =en2= 这个网卡是与网关相通的，而 =en0= 这个网卡并不通。

* 解决方法
删除多余的错误路由配置后恢复正常。
#+begin_src shell
  sudo route del ClientNet dev en0
#+end_src

* 疑问
虽说问题解决了，但还有些奇怪的现象无法解释：

1. 为什么登陆 =user◎Server= 的成功率低，而登陆 =tmpusr@Server= 的成功率高呢？
2. =ssh -vvv user@Server= 与 =ssh user@Server= 的登陆过程有什么不同，为什么加了调试项就能正常登陆呢？

希望能有大佬能给出原因。
</description>
<pubDate>2020-12-08</pubDate>
<guid>https://lujun9972.github.io/blog/2020/12/08/ssh偶发性登录卡死之谜/index.html</guid>
</item>
<item>
<title>笑话理解之Positive</title>
<link>https://lujun9972.github.io/blog/2020/12/06/笑话理解之positive/index.html</link>
<description>* A positive atom
#+begin_example
  A hydrogen atom lost its electron and went to the police station to file a missing electron report. He was questioned by the police: &quot;Haven&#39;t you just misplaced it somewhere? Are you sure that your electron is really lost?&quot;



  &quot;I&#39;m positive.&quot; replied the atom.
#+end_example

=positive= 既有 =肯定,确定= 的意思，也有 =正的，阳性= 的意思。当原子失去电子后，就变成 =正= 的了。
</description>
<pubDate>2020-12-06</pubDate>
<guid>https://lujun9972.github.io/blog/2020/12/06/笑话理解之positive/index.html</guid>
</item>
<item>
<title>使用Pi-hole屏蔽广告</title>
<link>https://lujun9972.github.io/blog/2020/12/05/使用pi-hole屏蔽广告/index.html</link>
<description>* 获取Pi的对外IP地址
我们一般通过ssh登陆树莓派来进行管理，因此可以从 =SSH_CONNECTION= 环境变量中获取树莓派的对外IP
#+begin_src shell :dir /ssh:pi@192.168.1.14:
  IP=$(echo ${SSH_CONNECTION}|cut -d &#39; &#39; -f 3)
  echo ${IP}
#+end_src

#+RESULTS:
: 192.168.1.14

=SSH_CONNECTION= 变量标识了ssh链接的客户端和服务端信息，该变量包含了四个用空格分隔的值，包括：客户端IP地址，客户端端口，服务端IP地址，服务端端口。
详细的说明可以参见 =man ssh=.

* 安装Pi-hole
安装Pi-hole最简单的方法就是用容器了，一行命令搞定：
#+begin_src shell  :dir /ssh:pi@192.168.1.14:
  sudo docker run -d \
    --name=pihole \
    -e TZ=Asia/Chongqing \
    -e WEBPASSWORD=password \
    -e SERVERIP=${IP} \
    -v $(pwd)/etc-pihole:/etc/pihole \
    -v $(pwd)/etc-dnsmasq:/etc/dnsmasq.d \
    -p 443:443/tcp \
    -p 80:80/tcp \
    -p 67:67/udp \
    -p 53:53/tcp \
    -p 53:53/udp \
    --cap-add=NET_ADMIN \
    --restart=unless-stopped \
    pihole/pihole
#+end_src

若使用的是基于Ubuntu的操作系统，那么 =53= 号端口可能会被 =system-resolved= 服务所占用，需要关闭 =DNSStubListener=, 执行如下命令:
#+begin_src shell
  sudo sed -r -i.orig &#39;s/#?DNSStubListener=yes/DNSStubListener=no/g&#39; /etc/systemd/resolved.conf
  sudo systemctl restart systemd-resolved
#+end_src

* 配置DNS
下一步需要配置DNS指向树梅派，为了防止树梅派故障无法提供DNS服务，我不打算改掉之前的DNS，而是在前面加上树梅派作为第一DNS。

创建一个新的 =/etc/resolv.conf.head=,并加入下面内容
#+begin_src conf
  nameserver 192.168.1.14
#+end_src

其中 =192.168.1.14= 为树梅派的IP地址。

* 配置拦截域名
 用 =password= 登陆 =http://$IP/admin=, 选择 Group Management -&gt; Adlists ，为 Default 规则组添加两个URL：
 #+begin_example
   https://gitee.com/privacy-protection-tools/anti-ad/raw/master/domains.txt
   https://share.is26.com/subscribe/adblock.hosts
 #+end_example

 然后再 Tools -&gt; Update Gravity 点击“Update”更新屏蔽域名表
</description>
<pubDate>2020-12-05</pubDate>
<guid>https://lujun9972.github.io/blog/2020/12/05/使用pi-hole屏蔽广告/index.html</guid>
</item>
<item>
<title>笑话理解之Fly</title>
<link>https://lujun9972.github.io/blog/2020/11/26/笑话理解之fly/index.html</link>
<description>
* fly and pussy
#+begin_example
  There was a fly looking at some food in a river. The fly thought, &quot;If I go down, I can get the food!&quot;



  There was a fish looking at the fly. The fish thought, &quot;If the fly goes down to get the food, I can get the fly!&quot;



  There was a bear looking at the fish. The bear thought, &quot;If the fly goes down to get the food, and that fish comes up to get the fly, I can get the fish!&quot;



  There was a man looking at the bear. The man thought, &quot;If the fly goes down to get the food, the fish comes up to get the fly, and the bear gets the fish, I can shoot the bear!&quot;



  There was a mouse looking at the man. The mouse thought, &quot;If the fly goes down to get the food, the fish comes up to get the fly, the bear gets the fish, and the man shoots the bear, I can get the man&#39;s sandwich!&quot;



  There was a cat looking at the mouse. The cat thought, &quot;If the fly goes down to get the food, the fish comes up to get the fly, the bear gets the fish, the man shoots the bear, and the mouse gets the sandwich, I can get the mouse!&quot;



  So the fly goes down to get the food. The fish comes up and gets the fly. The bear swipes his mighty paw and gets the fish. The man shoots the bear. The mouse runs for the man&#39;s sandwich. The cat lunges for the mouse, misses, and falls in the river.



  What&#39;s the moral of the story?



  When the fly goes down, the pussy gets
#+end_example

=pussy= 的双关就不用说了， =fly= 既有 =苍蝇= 的意思，也有 =褲档拉链= 的意思。
</description>
<pubDate>2020-11-26</pubDate>
<guid>https://lujun9972.github.io/blog/2020/11/26/笑话理解之fly/index.html</guid>
</item>
<item>
<title>使用xr帮助分析Elisp正则表达式</title>
<link>https://lujun9972.github.io/blog/2020/11/23/使用xr帮助分析elisp正则表达式/index.html</link>
<description>Elisp 的正则表达式语法以繁杂著称，分析起来特别麻烦。今天发现一个 =xr= 库非常好用，可以把Elisp正则表达式语法翻译成 =rx= 的格式，方便我们对其进行分析。
例如我们尝试使用 =xr= 对 =org-heading-regexp= 进行分析：
#+begin_src emacs-lisp :results code :exports both
  (xr org-heading-regexp)
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
(seq bol
     (group
      (one-or-more &quot;*&quot;))
     (opt
      (one-or-more &quot; &quot;)
      (group
       (*? nonl)))
     (zero-or-more
      (any &quot;	 &quot;))
     eol)
#+end_src

从中可以很清楚的看到整个正则表达式分成5个部分：
1. =bol= 表示行首
2. =(group (one-or-more &quot;*&quot;))= 一个或多个星号组成的分组
3. =(opt (one-or-more &quot; &quot;) (group (*? nonl)))= 一个可选项，由一个或多个空格和任意多个非换行字符的分组（其中 *? 说明使用贪婪算法）组成。
4. =(zero-or-mode (any &quot;	 &quot;))= 任意多个制表符或空格
5. =eol= 表示行末


注意到，结果中有很多类似 =bol=, =nonl=, =eol= 这样的缩写，我们可以通过将第二个参数设置为 =&#39;verbose= 来输出详细说明：

#+begin_src emacs-lisp :results code :exports both
  (xr org-heading-regexp &#39;verbose)
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
(seq line-start
     (group
      (one-or-more &quot;*&quot;))
     (zero-or-one
      (one-or-more &quot; &quot;)
      (group
       (*? not-newline)))
     (zero-or-more
      (any &quot;	 &quot;))
     line-end)
#+end_src
</description>
<pubDate>2020-11-23</pubDate>
<guid>https://lujun9972.github.io/blog/2020/11/23/使用xr帮助分析elisp正则表达式/index.html</guid>
</item>
<item>
<title>笑话理解之Swallow</title>
<link>https://lujun9972.github.io/blog/2020/11/13/笑话理解之swallow/index.html</link>
<description>* The bird of true love?
#+begin_example
  If the dove is the bird of peace, what is the bird of true love?

  The swallow.
#+end_example

=Swallow= 是燕子，因为燕子是一种选择终身伴侣的鸟类，只会与那个伴侣一起筑巢，纹身上的两只燕子通常代表着真爱或灵魂伴侣。一些人把燕子纹身作为忠诚和忠诚的象征，无论是对家人，对亲密的朋友，还是爱人。

不过 =Swallow= 也有 =吞咽= 的意思，咳咳...
</description>
<pubDate>2020-11-13</pubDate>
<guid>https://lujun9972.github.io/blog/2020/11/13/笑话理解之swallow/index.html</guid>
</item>
<item>
<title>笑话理解之screw</title>
<link>https://lujun9972.github.io/blog/2019/06/09/笑话理解之screw/index.html</link>
<description>* The TWIST Game
#+begin_example
  In the Spring of 1957, Bobby, a real cool cat with his own wheels, went to pick up his date.

  &quot;Carrie&#39;s not ready yet, Bobby. Why don&#39;t you have a seat?&quot; says her dad.

  &quot;Okay,&quot; says Bobby.

  &quot;What are you two kids planning to do tonight?&quot;

  Bobby replies politely, &quot;Oh, we&#39;ll probably go to the soda shop or maybe take in a movie.&quot;

  &quot;Why don&#39;t you two go out and screw?&quot; asks Carrie&#39;s dad. &quot;I hear all the kids are doing it.&quot;

  Bobby is taken aback. &quot;Wha... what did you say?&quot; he stammered.

  Her dad repeated, &quot;I say, Carrie really likes to screw. Why she&#39;d screw all night if her mother and I would let her!&quot;

  Bobby&#39;s eyes lit up. The evening was shaping up nicely. Eventually Carrie bopped down the stairs in her cute little poodle skirt and announced she was ready to go. Bobby eagerly escorted her out the front door.

  Not twenty minutes later, Carrie raced back into the house, slammed the door, and screamed at her father.

  &quot;Dammit, Daddy! It&#39;s called &#39;The TWIST!&#39;&quot;
#+end_example

=screw= 既有 =twist= 的意思，表示 =扭转，旋转=, 也有 =性行为= 的意思。
同时 =Twist= 也是一种游戏

[[file:images/joke_twist.jpg]]

* screw for door hinge

#+begin_example
  A woman comes into a hardware store.

  &quot;May I help you ma&#39;am?&quot;

  &quot;Yes,please,I need a three inch door hinge.&quot;

  &quot;Do you wanna screw for it?&quot;

  &quot;No thanks,&quot; she responds, &quot;But I&#39;ll blow you for that clock radio over there.&quot;
#+end_example

=screw= 既有 =螺丝钉= 的意思, 也有 =性行为= 的意思。
</description>
<pubDate>2020-09-10</pubDate>
<guid>https://lujun9972.github.io/blog/2019/06/09/笑话理解之screw/index.html</guid>
</item>
<item>
<title>笑话理解之smart</title>
<link>https://lujun9972.github.io/blog/2020/09/10/笑话理解之smart/index.html</link>
<description>* The difference between blonde and light bulb
#+begin_example
  What&#39;s the difference between a blonde and a light bulb?

  THe light bulb is smarter, but the blonde is easier to turn on.
#+end_example

=smart= 既有 =表面光亮= 的意思，也有 =聪明= 的意思，用来讽刺金发女郎很愚蠢（类似我们说的胸大无脑）

=turn on= 既有 =开启= 的意思，也有 =变得兴奋= 的意思，用来讽刺金发能力放荡。
</description>
<pubDate>2020-09-10</pubDate>
<guid>https://lujun9972.github.io/blog/2020/09/10/笑话理解之smart/index.html</guid>
</item>
<item>
<title>笑话理解之HEBREWS</title>
<link>https://lujun9972.github.io/blog/2020/08/30/笑话理解之hebrews/index.html</link>
<description>* who should brew the coffee
#+begin_example
  A man and his wife were having an argument about who should brew the coffee each morning.

  The wife said, &quot;You should do it, because you get up first, and then we don&#39;t have to wait as long to get our coffee.&quot;

  The husband said, &quot;You are in charge of cooking around here and you should do it, because that is your job, and I can just wait for my coffee.&quot;

  Wife replies, &quot;No, you should do it, and besides, it is in the Bible that the man should do the coffee.&quot;

  Husband replies, &quot;I can&#39;t believe that, show me.&quot;

  So she fetched the Bible, and opened the New Testament and showed him at the top of several pages, that it indeed says:

  &quot;HEBREWS&quot;
#+end_example

=HEBREWS= 是圣经新约中的 =希伯来书=. 当来也可以拆分成 =HE= =BREWS= 变成了 =他泡=
</description>
<pubDate>2020-08-30</pubDate>
<guid>https://lujun9972.github.io/blog/2020/08/30/笑话理解之hebrews/index.html</guid>
</item>
<item>
<title>sc:命令行里的电子表格</title>
<link>https://lujun9972.github.io/blog/2020/08/25/sc-命令行里的电子表格/index.html</link>
<description>Linux下的电子表格软件非常多，比如国产的WPS演示、LibreOffice Calc、Gnumeric、KSpread、Xspread。
但是这写软件都是运行在图形环境下的。而今天介绍的sc跟那些妖艳是不一样的，它运行在终端环境中。

* 安装
常见Linux发行版的仓库中都有该软件包，因此可以直接使用包安装工具安装
#+begin_src shell :dir /ssh:192.168.1.9|sudo:192.168.1.9:
  sudo apt install -y sc
#+end_src

* 界面说明
直接运行 =sc= 命令就启动了 =sc= 软件。其界面如下所示：

[[file:./images/screenshot-74.png]]
可以看出其界面跟常见的电子表格应用非常类似，也是用字母表示列，用数字表示行，一个单元格的位置由表示列的字母和行的数字组成，比如B2表示第2列第3行这个单元格。

而一个输入了内容的sc界面如下所示：

[[file:./images/screenshot-76.png]]

注意到第一行的 =D25 (10 2 0) [1.23456]=,它的意思是：
+ =D25= 为当前单元格的位置，光标目前处于D列25行所在的这个单元格处
+ =(10 2 0)= 为当前单元格的现实格式，其中第一个 =10= 表示单元格显示10位，多于10位的内容会显示为多个 =*=; 第二个 =2= 表示数字保留小数点后2位; 第三位用来表示是否使用科学计数法来表示数字， =0= 表示不用， =1= 表示用。
+ [1.23456] :: =[]= 表示该单元格的值为数字，1.23456为实际的值。若该单元格中的值为字符串，则该字符串会被引号应用起来，且在字符串前会有一个表示对齐方式的字符（&lt;表示左对齐、&gt;表示右对齐、|表示中间对齐）

* 常见操作

** 输入数据

[[file:./images/screenshot-77.png]]

+ 按下 ~=~ 表示输入数字(10)、其他单元格引用(D5)或是公式(@sum(A0:A5)
+ 按下 ~&lt;~ 表示输入左对齐的字符串
+ 按下 ~&gt;~ 表示输入右对齐的字符串
+ 按下 ~\~ 表示输入中间对齐的字符串
+ 按下 ~{~ 表示调整当前单元格的字符串为左对齐
+ 按下 ~}~ 表示调整当前单元格的字符串为右对齐
+ 按下 ~|~ 表示调整当前单元格的字符串为中间对齐

** 移动光标
sc的很多操作借鉴了vi的快捷键，你可以通过

+ =h/左箭头= 将光标移动到左边的一个单元格
+ =j/Ctrl+n/下箭头= 将光标移动到下边的一个单元格
+ =k/Ctrl+p/上箭头= 将光标移动到上边的一个单元格
+ =l/右箭头= 将光标移动到右边的一个单元格
+ =g位置= 将光标直接跳转到指定位置的单元格
+ =Ctrl+b= 上一页
+ =Ctrl+f= 下一叶


** 添加/删除单元格

+ =ir= 在光标上面插入一行空单元格
+ =ic= 在光标左边插入一列空单元格
+ =dr= 删除并复制光标所在的那一行单元格
+ =dc= 删除并复制光标所在的那一列单元格
+ =dd= 删除并复制光标所在的单元格
+ =yr= 复制光标所在行
+ =yc= 复制光标所在列
+ =yy= 复制光标所在单元格
+ =pr= 将复制内容粘贴为上一行的内容
+ =pc= 将复制内容粘贴为左一列的内容
+ =pp= 将复制内容粘贴在当前单元格

** 修改单元格内容
我们可以通过输入数据的方式来直接覆盖原单元格内容。但若原单元格中的内容很复杂，而我们只是想要对其进行一些微调的话，那么

+ 若原单元格为数字、单元格引用或公式，则按下 =e= 键进入修改模式，修改时的操作方式跟vi一致
+ 若原单元格为字符串，则按下 =E= 键进入修改模式，修改时的操作方式跟vi一致

** 设置单元格格式
通过 =f= 键可以对单元格的显示格式进行设置，按下后进入格式调整模式，在这个模式下

+ 按下 =l= 或 =右方向键= 可以调大该列单元格显示的宽度
+ 按下 =h= 或 =左方向键= 可以调小该列单元格显示的宽度
+ 按下 =k= 或 =上方向键= 可以调大该列单元格的小数点精度
+ 按下 =j= 或 =下方向键= 可以调小该列单元格的小数点精度
  
调整的过程会实时调整单元格的显示，调整好后按下 =回车= 退出格式调整模式。

[[file:images/sc01.gif]]

** 隐藏行列
当编辑大型的表格时，常常会需要隐藏一些多余的行和列。这些操作可以通过 =Z= (zap) 命令来实现。

+ =Zc= 隐藏光标所在的列
+ =Zr= 隐藏光标所在的行
  
要显示之前隐藏的行列时，则可以通过 =s= (show) 命令来实现。

+ =sc= 显示隐藏的列
+ =sr= 显示隐藏的行

** 拷贝/删除单元格内容

+ =x= 键可以删除单元格的内容
+ =m字母= 表示将当前单元格的内容存入 =字母= 表示的寄存器中。
+ =c字母= 表示从 =字母= 表示的寄存器中拷贝出单元格内容。

** 公式

按下 ~=~ 键后不仅可以输入数字，还能输入公式，例如要计算B4和B6的值那么可以输入 ~=B4+B6~.

在公式中我们还可以使用函数，例如输入 ~=@sum(A1:A10)~ 就会将A1到A10的值进行累加了。

sc内置有许多常见的公式，详情可以运行 =man sc= 来进行查看。

** 保存/加载工作簿

+ 使用 =P &quot;/tmp/file.sc&quot;= 来将内容保存到 =/tmp/file.sc= 文件中
+ 使用 =G &quot;/tmp/file.sc&quot;= 来将当前内容清空，并加载 =/tmp/file.sc= 文件
</description>
<pubDate>2020-08-28</pubDate>
<guid>https://lujun9972.github.io/blog/2020/08/25/sc-命令行里的电子表格/index.html</guid>
</item>
</channel>
</rss>